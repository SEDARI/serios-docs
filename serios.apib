FORMAT: 1A
HOST: api.serios.sec.uni-passau.de

# SERIOS
The SERIOS API is a generic service for storing and managing IoT data streams.

## About SERIOS
<!-- TODO Phil 25//09/16: Add description what SERIOS is. -->
The implementation is open-source and is publicly available on [Github](https://github.com/SEDARI/serios).

#Group Service Object operations

Short description what Service Object are and what purpose they serve.

## CRUD operations on Service Objects [/so/crud]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
Performing Create, Read, Update & Delete (CRUD) operations on Service Objects.

### Create a new Service Object [POST /]
<!-- TODO Phil 25/09/16 add attributes and body for service object-->
Create a new ServiceObject definition and register it at SERIOS. The **unique** ServiceObject id (`soID`) is returned on success.

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes
        + description (required, string) - the description of the service object

+ Response 201 (application/json)
    {
       "id": "23af384834be722938f",
       "createdAt": "1474969664"
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Retrieve the Service Object description [GET /{soID}]
Retrieve the description of a Service Object.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Update Service Object description [PUT /{soID}]
<!-- TODO Phil 25/09/16 add attributes and body for updating service object. Maybe include restrictions-->
Update the description of a Service Object.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    {
       "id": "23af384834be722938f",
       "updatedAt": "1474979664"
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Delete the Service Object description [DELETE /{soID}]
Delete the description of a Service Object, and all associated data
**IMPORTANT: This also removes all appropiate Sensor Data.**

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 204 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

## Retrieving Service Objects Information [/so/get]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
### Get all the Service Objects from a user [GET /]
Retrieve all the Service Objects from a given user (identified by the `Authorization` header).

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    [
        "23af384834be722938f", "9472de2387a23b040f4"
    ]

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Get the description of all associated Streams [GET /{soID}]
Retrieve the description of the streams field.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }


# Group Sensor Data operations

Short description what Sensor Data is and what purpose it serves.

## Store and Delete data [/data/put]

### Push data to the platform [PUT /{soID}/streams/{streamID}]
Store new data associated to the Stream of the Service Object.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 201 (application/json)
    {
        "status": 201,
        "message": "Data stored, accepted for dispatching"
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Delete all data stored for a Service Object Stream [DELETE /{soID}/streams/{streamID}]
Remove and clear all the data associated to a Stream of a Service Object.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 204 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

## Retrieve stored data [/data/get]

### Get data stored for a Stream of a Service Object [GET /{soID}/streams/{streamID}/{options}]
Retrieve data stored in the platform that is associated to one Stream of a Service Object.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream
    + options: (optional, enum[string]) - If provided, limits the sent data. `lastUpdate` will limit to the latest data, a `timestamp` will send all data from the provided `timestamp` to the time of the request.
        + Members
            + `lastUpdate`
            + `1474879676`

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Queries on data of a single Service Object [POST /{soID}/streams/{streamID}/search]
501 'Not Implemented' yet.

+ Parameters
    + soID: `2932942f823b82ab34` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

