FORMAT: 1A
HOST: api.serios.sec.uni-passau.de

# SERIOS
The SERIOS API is a generic service for storing and managing IoT data streams.

## About SERIOS
SERIOS is an open-sourced generic service for storing and managing IoT data streams.

This documentation describes the publicly available API interface provided by SERIOS. It is structured by the three
major components: Gateways, Service Objects and Sensor Data.

The implementation of SERIOS is available on [Github](https://github.com/SEDARI/serios).

The source code to this documentation is also available on [Github](https://github.com/SEDARI/serios-docs).

## Gateways
Gateways represents ...

## Service Objects
Service Objects provide the structure how sensor data is going to be stored. They determine which sensors will upload
their data to the service. Multiple Sensors can be described in one Service Object in so called `Streams`. Every
sensor can have multiple dimensions, which will be called `Channels`. E.g. a weatherboard with multiple measuring
devices, e.g. two different for temperature, one for humidity and one for brightness measuring, is defined in one single
`Stream`, but its measurement devices are defined in `Channels`.

For every Service Object and its `Streams` meta data like a name and a description can be added. For `Channels`
information like the `data type` and the `unit` for the sensor data is required.

Each Service Object can have its own privacy policy. When creating a Service Object you can decide whether the stored
data should be available to the public or only for yourself by setting the `public` attribute to `true` or `false`.

## Sensor Data
Sensor Data is ...

# Data Structures
<!-- Gateways -->
## Gateway (object)
+ name (string, required) - The name of the Gateway
+ URL (string, required) - The URI where this Gateway can be reached at
+ protocol (string, optional) - The protocol the Gateway communicates with
+ port (number, optional) - The port the Gateway communicates at

<!-- Service Objects -->
## ServiceObject (object)
+ name (string, required) - The name of the Service Object
+ description (string, required) - The description of the Service Object
+ public (string, required) - The availability of the uploaded data associated to the Service Object
+ streams (array[Stream], required) - A collection of Streams associated to the Service Object
+ gateway (GatewaySO, optional) - The gateway where the Service Object is registered at

## Stream (object)
+ name (string, required) - The name of the Stream
+ description (string, required) - The description of the Stream
+ channels (array[Channel], required) - A collection of Channels associated to the Stream

## Channel (object)
+ name (string, required) - The name of the Channel
+ type (string, required) - The type of data of the Channel
+ unit (string, required) - The unit of the Channel

## GatewaySO (object)
+ gatewayID (string, optional) - The identifier of the Gateway
+ name (string, optional) - The name of the Gateway
+ URL (string, optional) - The URL the Gateway can be reached with


<!-- Sensor Data -->
## SensorData(object)
+ channels (array[SensorDataChannel], required) - The data channels associated to the data

## SensorDataChannel(object)
+ name (string, required) - The name of the data channel
+ value (string, required) - The actual value of the data

#Group Gateway operations

Short description what Gateways are and what purpose they serve.

## CRUD operations on Gateways [/gate/crud]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
Performing Create, Read, Update & Delete (CRUD) operations on Gateways.

### Create a new Gateway [POST /gateway/]
Create a new Gateway definition. The **unique** Gateway id (`gatewayID`) is returned on success.

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes (Gateway)

    + Body
        {
            "name": "Smart Home 1",
            "URL": "https://gateway_test.com/dir/to/my/gateway/",
            "port": 443,
            "protocol": "HTTPS"
        }


+ Response 201 (application/json)
    + Attributes
        + id (string) - The identifier of the created Gateway.
        + createdAt (number) - The timestamp when the Gateway was created.
    + Body
        {
           "id": "3294b3fc38e493b93",
           "createdAt": "1476726036 "
        }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Retrieve the Gateway description [GET /{gatewayID}]
Retrieve the description of a Gateway.
+ Parameters
    + gatewayID: `3294b3fc38e493b93` (required, string) - The id of a Gateway

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    + Attributes (Gateway)

    + Body
        {
            "name": "Smart Home 1",
            "URL": "https://gateway_test.com/dir/to/my/gateway/",
            "port": 443,
            "protocol": "HTTPS"
        }

+ Response 400 (application/json)
    {
        "status": 400,
        "message": "Bad Request. Could not find Gateway.
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }


### Update an existing Gateway [UPDATE /gateway/{gatewayID}]
Update the description of a Gateway.
+ Parameters
    + gatewayID: `3294b3fc38e493b93` (required, string) - The id of a Gateway

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes (Gateway)

    + Body
        {
            "name": "Smart Home 1",
            "URL": "https://gateway_test.com/updated/dir/to/my/gateway/",
            "port": 443,
            "protocol": "HTTPS"
        }


+ Response 200 (application/json)
    {
       "id": "3294b3fc38e493b93",
       "updatedAt": "1476726991 "
    }


+ Response 400 (application/json)
    {
        "status": 400,
        "message": "Bad Request. Bad syntax used for Gateways."
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }



### Delete a Gateway [DELETE /gateway/{gatewayID}]
Delete a Gateway and all associated data
**IMPORTANT: This also removes all appropiate Service Objects and its uploaded Sensor Data.**

+ Parameters
    + gatewayID: `3294b3fc38e493b93` (required, string) - The id of a Gateway

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 204 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

## Retrieve Gateways Information [/gate/get]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
### Get all Gateway IDs from a user [GET /gateway]
Retrieve all Gateway IDs from a given user (identified by the `Authorization` header).

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    [
        3294b3fc38e493b93, 394b34cf9348ab167
    ]

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

#Group Service Object operations

Short description what Service Object are and what purpose they serve.

## CRUD operations on Service Objects [/so/crud]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
Performing Create, Read, Update & Delete (CRUD) operations on Service Objects.

### Create a new Service Object [POST /]
Create a new ServiceObject definition and register it at SERIOS. The **unique** ServiceObject id (`soID`) is returned on success.

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes (ServiceObject)

    + Body
        {
            name: "Smart Home 1 Weather Sensors",
            description: "This Service Object holds all weather related sensors of Smart Home 1.",
            public: true,
            streams: [
                {
                    name: "Weatherboard",
                    description: "The sensor that measures temperature, humidity and brightness of the Smart Home.",
                    channels: [
                        {
                            name: "Temperature Sensor outside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Temperature Sensor inside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Humidity Sensor in the bathroom",
                            type: "Number",
                            unit: "Relative Humidity"
                        },
                        {
                            name: "Brightness Sensor in the bedroom.",
                            type: "Number",
                            unit: "Lux"
                        }
                    ]
                },
                {
                    name: "Location Sensor",
                    description: "The sensor that measures the location of the Smart Home.",
                    channels: [
                        {
                            name: "Latitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        },
                        {
                            name: "Longitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        }
                    ]
                }
            ],
        }

+ Response 201 (application/json)
    + Attributes
        + id (string) - The identifier of the created Service Object.
        + createdAt (number) - The timestamp when the Service Object was created.
    + Body
        {
           "id": "23af384834be722938f",
           "createdAt": "1474969664"
        }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Retrieve the Service Object description [GET /{soID}]
Retrieve the description of a Service Object.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    + Attributes (ServiceObject)

    + Body
        {
            name: "Smart Home 1 Weather Sensors",
            description: "This Service Object holds all weather related sensors of Smart Home 1.",
            public: true,
            streams: [
                {
                    name: "Weatherboard",
                    description: "The sensor that measures temperature, humidity and brightness of the Smart Home.",
                    channels: [
                        {
                            name: "Temperature Sensor outside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Temperature Sensor inside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Humidity Sensor in the bathroom",
                            type: "Number",
                            unit: "Relative Humidity"
                        },
                        {
                            name: "Brightness Sensor in the bedroom.",
                            type: "Number",
                            unit: "Lux"
                        }
                    ]
                },
                {
                    name: "Location Sensor",
                    description: "The sensor that measures the location of the Smart Home.",
                    channels: [
                        {
                            name: "Latitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        },
                        {
                            name: "Longitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        }
                    ]
                }
            ],
        }

+ Response 400 (application/json)
    {
        "status": 400,
        "message": "Bad Request. Could not find Service Object."
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Update Service Object description [PUT /{soID}]
<!-- TODO Phil 11/10/16 add restrictions to updating-->
Update the description of a Service Object.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes (ServiceObject)

    + Body
        {
            name: "Smart Home 1 Weather Sensors",
            description: "This Service Object holds all weather related sensors of Smart Home 1.",
            public: true,
            streams: [
                {
                    name: "Weatherboard",
                    description: "The sensor that measures temperature, humidity and brightness of the Smart Home.",
                    channels: [
                        {
                            name: "Temperature Sensor outside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Temperature Sensor inside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Humidity Sensor in the bathroom",
                            type: "Number",
                            unit: "Relative Humidity"
                        },
                        {
                            name: "Brightness Sensor in the bedroom.",
                            type: "Number",
                            unit: "Lux"
                        }
                    ]
                },
                {
                    name: "Location Sensor",
                    description: "The sensor that measures the location of the Smart Home.",
                    channels: [
                        {
                            name: "Latitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        },
                        {
                            name: "Longitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        }
                    ]
                }
            ],
        }


+ Response 200 (application/json)
    {
       "id": "23af384834be722938f",
       "updatedAt": "1474979664"
    }

+ Response 400 (application/json)
    {
        "status": 400,
        "message": "Bad Request. Bad syntax used for Service Objects."
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Delete the Service Object description [DELETE /{soID}]
Delete the description of a Service Object, and all associated data
**IMPORTANT: This also removes all appropiate Sensor Data.**

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 204 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

## Retrieving Service Objects Information [/so/get]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
### Get all the Service Object IDs from a user [GET /]
Retrieve all the Service Object IDs from a given user (identified by the `Authorization` header).

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    [
        "23af384834be722938f", "9472de2387a23b040f4"
    ]

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Get the description of all associated Streams [GET /{soID}]
Retrieve the description of the streams field.

This feature is not implemented yet!

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    + Attributes (array[Stream])

    + Body
        {
            streams: [
                {
                    name: "Weatherboard",
                    description: "The sensor that measures temperature, humidity and brightness of the Smart Home.",
                    channels: [
                        {
                            name: "Temperature Sensor outside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Temperature Sensor inside the house",
                            type: "Number",
                            unit: "Grad Celsius"
                        },
                        {
                            name: "Humidity Sensor in the bathroom",
                            type: "Number",
                            unit: "Relative Humidity"
                        },
                        {
                            name: "Brightness Sensor in the bedroom.",
                            type: "Number",
                            unit: "Lux"
                        }
                    ]
                },
                {
                    name: "Location Sensor",
                    description: "The sensor that measures the location of the Smart Home.",
                    channels: [
                        {
                            name: "Latitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        },
                        {
                            name: "Longitude of the Smart Home",
                            type: "Number",
                            unit: "Degrees"
                        }
                    ]
                }
            ],
        }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }


# Group Sensor Data operations

Short description what Sensor Data is and what purpose it serves.

## Store and Delete data [/data/put]

### Push data to the platform [PUT /{soID}/streams/{streamID}]
Store new data associated to the Stream of the Service Object.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes (SensorData)

    + Body
        {
            channels: [
                {
                    name: "temperature1",
                    value: "10.2"
                },
                {
                    name: "temperature2",
                    value: "20.8"
                },
                {
                    name: "humidity",
                    value: "63"
                },
                {
                    name: "brightness",
                    value: "970"
                }
            ]
        }

+ Response 201 (application/json)
    {
        "status": 201,
        "message": "Data stored, accepted for dispatching"
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Delete all data stored for a Service Object Stream [DELETE /{soID}/streams/{streamID}]
Remove and clear all the data associated to a Stream of a Service Object.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 204 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

## Retrieve stored data [/data/get]

### Get data stored for a Stream of a Service Object [GET /{soID}/streams/{streamID}/{options}]
Retrieve data stored in the platform that is associated to one Stream of a Service Object.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream
    + options: (optional, enum[string]) - If provided, limits the sent data. `lastUpdate` will limit to the latest data, a `timestamp` will send all data from the provided `timestamp` to the time of the request.
        + Members
            + `lastUpdate`
            + `1474879676`

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)
    + Attributes (array[SensorData])

    + Body

    {
        "data": [
            {
                channels: [
                    {
                        name: "temperature1",
                        value: "10.2"
                    },
                    {
                        name: "temperature2",
                        value: "20.8"
                    },
                    {
                        name: "humidity",
                        value: "63"
                    },
                    {
                        name: "brightness",
                        value: "520"
                    }
                ]
                "timestamp": 1476697345
            },
            {
                channels: [
                    {
                        name: "temperature1",
                        value: "12.8"
                    },
                    {
                        name: "temperature2",
                        value: "21.2"
                    },
                    {
                        name: "humidity",
                        value: "68"
                    },
                    {
                        name: "brightness",
                        value: "970"
                    }
                ]
                "timestamp": 1476643579
            },
        ]
    }

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

### Queries on data of a single Service Object [POST /{soID}/streams/{streamID}/search]
501 'Not Implemented' yet.

+ Parameters
    + soID: `23af384834be722938f` (required, string) - The id of a Service Object
    + streamID: `temperature_sensor` (required, string) - The id of the Stream

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

+ Response 403 (application/json)
    {
        "status": 403,
        "message": "Access was denied!"
    }

