FORMAT: 1A
HOST: api.serios.sec.uni-passau.de

# SERIOS
The SERIOS API is a generic service of storing and managing IoT data streams.

## About SERIOS
<!-- TODO Phil 25//09/16: Add description what SERIOS is. -->
The implementation is open-source and can be found on [Github](https://github.com/SEDARI/serios).

# CRUD operations on Service Objects [/so/crud]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
CRUD stands for Create, Read, Update & Delete.

## Create a new Service Object [POST /]
<!-- TODO Phil 25/09/16 add attributes and body for service object-->
Create a new ServiceObject definition and register it at SERIOS. The **unique** ServiceObject id (`soID`) is returned on success.

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Attributes
        + description (required, string) - the description of the service object

+ Response 201 (application/json)

## Retrieve the Service Object description [GET /{soID}]
Retrieve the description of a Service Object.

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a service object

+ Response 200 (application/json)

## Update Service Object description [PUT /{soID}]
<!-- TODO Phil 25/09/16 add attributes and body for updating service object. Maybe include restrictions-->
Update the description of a Service Object.

+ Request (application/json)
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID: `2932942f823b82ab34` (required, string)  - The identifier of a service object

+ Response 200 (application/json)

## Delete the Service Object description [DELETE /{soID}]
Delete the description of a Service Object, and all associated data
**IMPORTANT: This also removes all appropiate Sensor Data.**

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a service object

+ Response 200 (application/json)

# Retrieving Service Objects Information [/so/get]
<!-- The URI above is ignored. Do NOT change this. This will break the layout -->
## Get all the Service Objects from a user [GET /]
Retrieve all the Service Objects from a given user (identified by the `Authorization` header).

+ Request
    + Headers
        Authorization: 2932942f823b82ab34

+ Response 200 (application/json)

## Get the description of all associated Streams [GET /{soID}]
Retrieve the description of the streams field.

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a service object

+ Response 200 (application/json)

# Sensor Data operations
## Store and Delete data [/data]

### Push data to the platform [PUT /{soID}/streams/{streamID}]
Store new data associated to the Stream of the Service Object.

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a Service Object
        + streamID (required, string, `temperature_sensor`) - The identifier of the Stream

### Delete all data stored for a Service Object Stream [DELETE /{soID}/streams/{streamID}]
Remove and clear all the data associated to a Stream of a Service Object.

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a Service Object
        + streamID (required, string, `temperature_sensor`) - The identifier of the Stream

## Retrieve stored data [/getdata]

### Get data stored for a Stream of a Service Object [GET /{soID}/streams/{streamID}]
Retrieve data stored in the platform that is associated to one Stream of a Service Object.

+ Request
    + Headers
        Authorization: 2932942f823b82ab34
    + Parameters
        + soID (required, string, `2932942f823b82ab34`) - The identifier of a Service Object
        + streamID (required, string, `temperature_sensor`) - The identifier of the Stream
        + options (optinal, string) - If provided, limits the sent data. `lastUpdate` will limit to the lastest data, a timestamp will send all data from the provided timestamp to the time of the request.
            + Values
                + `lastUpdate`
                + `1474879676`

